#+TITLE: CallbackTester
#+AUTHOR: Peter Polidoro
#+EMAIL: peterpolidoro@gmail.com

* Library Information
  - Author :: Peter Polidoro
  - License :: BSD

* Host Computer Interface
** Arduino Serial Monitor

   Open the Serial Monitor in the Arduino IDE.

   Set the baud to match the value in the Arduino sketch (115200).

   Set the line ending to 'Newline'.

   To get help information about the modular device, type a single
   question mark ? into the input property and press the 'Send' button or
   press the 'Enter' key.

   Request:

   #+BEGIN_SRC sh
?
   #+END_SRC

   Response:

   #+BEGIN_SRC js
{
  "id": "?",
  "result": {
    "device_id": {
      "name": "callback_tester",
      "form_factor": "3x2",
      "serial_number": 0
    },
    "api": {
      "firmware": [
        "CallbackTester"
      ],
      "verbosity": "NAMES",
      "properties": [
        "durationOn",
        "durationOff",
        "count"
      ],
      "callbacks": [
        "setLedOn",
        "setLedOff",
        "blinkLed"
      ]
    }
  }
}
   #+END_SRC

   The form_factor and serial_number may be different on your board than the ones
   shown above.

   To get more verbose help about the modular device, including all API firmware,
   type two question marks ?? into the input property and press the 'Send' button
   or press the 'Enter' key.

   Request:

   #+BEGIN_SRC sh
??
   #+END_SRC

   Response:

   #+BEGIN_SRC js
{
  "id": "??",
  "result": {
    "device_id": {
      "name": "callback_tester",
      "form_factor": "3x2",
      "serial_number": 0
    },
    "api": {
      "firmware": [
        "ALL"
      ],
      "verbosity": "NAMES",
      "functions": [
        "getDeviceId",
        "getDeviceInfo",
        "getApi",
        "getPropertyDefaultValues",
        "setPropertiesToDefaults",
        "getPropertyValues",
        "getPinInfo",
        "setPinMode",
        "getPinValue",
        "setPinValue"
      ],
      "parameters": [
        "firmware",
        "verbosity",
        "pin_name",
        "pin_mode",
        "pin_value"
      ],
      "properties": [
        "serialNumber",
        "durationOn",
        "durationOff",
        "count"
      ],
      "callbacks": [
        "setLedOn",
        "setLedOff",
        "blinkLed"
      ]
    }
  }
}
   #+END_SRC

   "functions" is an array of user functions. To execute a function, simply type it
   into the input property and press the 'Send' button or press the 'Enter' key.

   After uploading new firmware to the device for the first time, usually you want
   to set all properties to their default values, so the values will be known and
   valid.

   Request:

   #+BEGIN_SRC sh
setPropertiesToDefaults ["ALL"]
   #+END_SRC

   Response:

   #+BEGIN_SRC js
{
  "id": "setPropertiesToDefaults",
  "result": null
}
   #+END_SRC

   Request:

   #+BEGIN_SRC sh
getDeviceInfo
   #+END_SRC

   Response:

   #+BEGIN_SRC js
{
  "id": "getDeviceInfo",
  "result": {
    "processor": "MK20DX256",
    "hardware": [
      {
        "name": "Teensy",
        "version": "3.2",
        "pins": [
          "led",
          "bnc_a",
          "bnc_b",
          "bnc_c",
          "bnc_d",
          "bnc_e",
          "bnc_f"
        ]
      }
    ],
    "firmware": [
      {
        "name": "ModularServer",
        "version": "5.0.0"
      },
      {
        "name": "CallbackTester",
        "version": "2.0.0"
      }
    ]
  }
}
   #+END_SRC

   Each hardware layer may add zero or more pins.

   Request:

   #+BEGIN_SRC sh
getPinInfo ALL
   #+END_SRC

   Response:

   #+BEGIN_SRC js
{
  "id": "getPinInfo",
  "result": [
    {
      "name": "led",
      "hardware": "Teensy",
      "pin_mode": "DIGITAL_OUTPUT"
    },
    {
      "name": "bnc_a",
      "hardware": "Teensy",
      "callback": "setLedOn",
      "pin_mode": "INTERRUPT_FALLING"
    },
    {
      "name": "bnc_b",
      "hardware": "Teensy",
      "callback": "setLedOff",
      "pin_mode": "INTERRUPT_FALLING"
    },
    {
      "name": "bnc_c",
      "hardware": "Teensy",
      "callback": "setLedOn",
      "pin_mode": "INTERRUPT_FALLING"
    },
    {
      "name": "bnc_d",
      "hardware": "Teensy",
      "callback": "setLedOff",
      "pin_mode": "INTERRUPT_FALLING"
    },
    {
      "name": "bnc_e",
      "hardware": "Teensy",
      "callback": "blinkLed",
      "pin_mode": "INTERRUPT_FALLING"
    },
    {
      "name": "bnc_f",
      "hardware": "Teensy",
      "callback": "setLedOff",
      "pin_mode": "INTERRUPT_FALLING"
    }
  ]
}
   #+END_SRC

   Each pin may be dynamically assigned to a callback with an interrupt mode or the
   pin can be in input or output modes and controlled separately from callbacks.

   Use callback functions to attach or detach callbacks to pins. Callbacks may be
   attached to one or more pins, but each pin can only have a single callback
   attached.

   Request:

   #+BEGIN_SRC sh
blinkLed ?
   #+END_SRC

   Response:

   #+BEGIN_SRC js
{
  "id": "blinkLed",
  "result": {
    "name": "blinkLed",
    "firmware": "CallbackTester",
    "properties": [
      "durationOn",
      "durationOff",
      "count"
    ],
    "pins": [
      "bnc_e"
    ],
    "functions": [
      "trigger",
      "attachTo",
      "detachFrom"
    ],
    "parameters": [
      "pin_name",
      "pin_mode"
    ]
  }
}
   #+END_SRC

   Request:

   #+BEGIN_SRC sh
blinkLed trigger
   #+END_SRC

   Response:

   #+BEGIN_SRC js
{
  "id": "blinkLed",
  "result": null
}
   #+END_SRC

   Request:

   #+BEGIN_SRC sh
blinkLed
   #+END_SRC

   Response:

   #+BEGIN_SRC js
{
  "id": "blinkLed",
  "result": null
}
   #+END_SRC

   Request:

   #+BEGIN_SRC sh
blinkLed attachTo ??
   #+END_SRC

   Response:

   #+BEGIN_SRC js
{
  "id": "blinkLed",
  "result": {
    "name": "attachTo",
    "firmware": "ModularServer",
    "parameters": [
      {
        "name": "pin_name",
        "type": "string",
        "subset": [
          "ALL",
          "led",
          "bnc_a",
          "bnc_b",
          "bnc_c",
          "bnc_d",
          "bnc_e",
          "bnc_f"
        ]
      },
      {
        "name": "pin_mode",
        "type": "string",
        "subset": [
          "INTERRUPT_LOW",
          "INTERRUPT_CHANGE",
          "INTERRUPT_RISING",
          "INTERRUPT_FALLING"
        ]
      }
    ]
  }
}
   #+END_SRC

   Request:

   #+BEGIN_SRC sh
blinkLed attachTo bnc_f INTERRUPT_FALLING
   #+END_SRC

   Response:

   #+BEGIN_SRC js
{
  "id": "blinkLed",
  "result": null
}
   #+END_SRC

   Request:

   #+BEGIN_SRC sh
blinkLed ?
   #+END_SRC

   Response:

   #+BEGIN_SRC js
{
  "id": "blinkLed",
  "result": {
    "name": "blinkLed",
    "firmware": "CallbackTester",
    "properties": [
      "durationOn",
      "durationOff",
      "count"
    ],
    "pins": [
      "bnc_e",
      "bnc_f"
    ],
    "functions": [
      "trigger",
      "attachTo",
      "detachFrom"
    ],
    "parameters": [
      "pin_name",
      "pin_mode"
    ]
  }
}
   #+END_SRC

   Request:

   #+BEGIN_SRC sh
blinkLed detachFrom ?
   #+END_SRC

   Response:

   #+BEGIN_SRC js
{
  "id": "blinkLed",
  "result": {
    "name": "detachFrom",
    "firmware": "ModularServer",
    "parameters": [
      "pin_name"
    ]
  }
}
   #+END_SRC

   Request:

   #+BEGIN_SRC sh
count setValue 2
   #+END_SRC

   Response:

   #+BEGIN_SRC js
{
  "id": "count",
  "result": 2
}
   #+END_SRC

   Request:

   #+BEGIN_SRC sh
blinkLed
   #+END_SRC

   Response:

   #+BEGIN_SRC js
{
  "id": "blinkLed",
  "result": null
}
   #+END_SRC

   Request:

   #+BEGIN_SRC sh
setPinMode ??
   #+END_SRC

   Response:

   #+BEGIN_SRC js
{
  "id": "setPinMode",
  "result": {
    "name": "setPinMode",
    "firmware": "ModularServer",
    "parameters": [
      {
        "name": "pin_name",
        "type": "string",
        "subset": [
          "ALL",
          "led",
          "bnc_a",
          "bnc_b",
          "bnc_c",
          "bnc_d",
          "bnc_e",
          "bnc_f"
        ]
      },
      {
        "name": "pin_mode",
        "type": "string",
        "subset": [
          "DIGITAL_INPUT",
          "DIGITAL_INPUT_PULLUP",
          "DIGITAL_OUTPUT",
          "ANALOG_INPUT",
          "ANALOG_OUTPUT",
          "PULSE_RISING",
          "PULSE_FALLING"
        ]
      }
    ]
  }
}
   #+END_SRC

   Request:

   #+BEGIN_SRC sh
setPinMode ALL DIGITAL_INPUT
   #+END_SRC

   Response:

   #+BEGIN_SRC js
{
  "id": "setPinMode",
  "result": null
}
   #+END_SRC

   Request:

   #+BEGIN_SRC sh
getPinInfo ALL
   #+END_SRC

   Response:

   #+BEGIN_SRC js
{
  "id": "getPinInfo",
  "result": [
    {
      "name": "led",
      "hardware": "Teensy",
      "pin_mode": "DIGITAL_INPUT"
    },
    {
      "name": "bnc_a",
      "hardware": "Teensy",
      "pin_mode": "DIGITAL_INPUT"
    },
    {
      "name": "bnc_b",
      "hardware": "Teensy",
      "pin_mode": "DIGITAL_INPUT"
    },
    {
      "name": "bnc_c",
      "hardware": "Teensy",
      "pin_mode": "DIGITAL_INPUT"
    },
    {
      "name": "bnc_d",
      "hardware": "Teensy",
      "pin_mode": "DIGITAL_INPUT"
    },
    {
      "name": "bnc_e",
      "hardware": "Teensy",
      "pin_mode": "DIGITAL_INPUT"
    },
    {
      "name": "bnc_f",
      "hardware": "Teensy",
      "pin_mode": "DIGITAL_INPUT"
    }
  ]
}
   #+END_SRC

** Python

   Example Python session:

   #+BEGIN_SRC python
from modular_client import ModularClient
dev = ModularClient() # Automatically finds device if one available
dev.get_device_id()
{'form_factor': '3x2', 'name': 'callback_tester', 'serial_number': 0}
dev.get_methods()
['duration_off',
 'get_property_default_values',
 'set_led_on',
 'blink_led',
 'set_properties_to_defaults',
 'get_device_id',
 'serial_number',
 'duration_on',
 'get_pin_value',
 'get_device_info',
 'set_pin_mode',
 'get_api',
 'set_led_off',
 'get_pin_info',
 'set_pin_value',
 'count',
 'get_property_values']
dev.set_properties_to_defaults(['ALL'])
dev.get_device_info()
{'firmware': [{'name': 'ModularServer', 'version': '5.0.0'},
  {'name': 'CallbackTester', 'version': '2.0.0'}],
 'hardware': [{'name': 'Teensy',
   'pins': ['led', 'bnc_a', 'bnc_b', 'bnc_c', 'bnc_d', 'bnc_e', 'bnc_f'],
   'version': '3.2'}],
 'processor': 'MK20DX256'}
dev.blink_led('?')
{'firmware': 'CallbackTester',
 'functions': ['trigger', 'attachTo', 'detachFrom'],
 'name': 'blinkLed',
 'parameters': ['pin_name', 'pin_mode'],
 'pins': ['bnc_e'],
 'properties': ['durationOn', 'durationOff', 'count']}
dev.blink_led('trigger')
dev.blink_led()
dev.blink_led('attachTo','??')
{'firmware': 'ModularServer',
 'name': 'attachTo',
 'parameters': [{'name': 'pin_name',
   'subset': ['ALL',
    'led',
    'bnc_a',
    'bnc_b',
    'bnc_c',
    'bnc_d',
    'bnc_e',
    'bnc_f'],
   'type': 'string'},
  {'name': 'pin_mode',
   'subset': ['INTERRUPT_LOW',
    'INTERRUPT_CHANGE',
    'INTERRUPT_RISING',
    'INTERRUPT_FALLING'],
   'type': 'string'}]}
dev.blink_led('attachTo','bnc_f','INTERRUPT_FALLING')
dev.count('setValue',2)
2
dev.blink_led()
   #+END_SRC

   For more details on the Python interface:

   [[https://github.com/janelia-pypi/modular_client_python]]

** Matlab

   Example Matlab session:

   #+BEGIN_SRC matlab
% Linux and Mac OS X
ls /dev/tty*
serial_port = '/dev/ttyACM0'     % example Linux serial port
serial_port = '/dev/tty.usbmodem262471' % example Mac OS X serial port
% Windows
getAvailableComPorts()
ans =
  'COM1'
  'COM4'
serial_port = 'COM4'             % example Windows serial port
dev = ModularClient(serial_port) % creates a device object
dev.open()                       % opens a serial connection to the device
dev.getDeviceId()
ans =
  name: 'callback_tester'
  form_factor: '3x2'
  serial_number: 0
dev.getMethods()                 % get device methods
ans =
  Modular Device Methods
  ---------------------
  getDeviceId
  getDeviceInfo
  getApi
  getPropertyDefaultValues
  setPropertiesToDefaults
  getPropertyValues
  getPinInfo
  setPinMode
  getPinValue
  setPinValue
  setLedOn
  setLedOff
  blinkLed
  serialNumber
  durationOn
  durationOff
  count
dev.setPropertiesToDefaults({'ALL'});
dev.blinkLed('?')
ans =
  name: 'blinkLed'
  firmware: 'CallbackTester'
  properties: {'durationOn'  'durationOff'  'count'}
  pins: {'bnc_e'}
  functions: {'trigger'  'attachTo'  'detachFrom'}
  parameters: {'pin_name'  'pin_mode'}
dev.blinkLed('trigger');
dev.blinkLed();
dev.blinkLed('attachTo','??')
ans =
  name: 'attachTo'
  firmware: 'ModularServer'
  parameters: {[1x1 struct]  [1x1 struct]}
dev.blinkLed('attachTo','bnc_f','INTERRUPT_FALLING');
dev.count('setValue',2)
ans =
  2
dev.blinkLed();
dev.close()
clear dev
   #+END_SRC

   For more details on the Matlab interface:

   [[https://github.com/janelia-matlab/modular_client_matlab]]

* Installation

  [[https://github.com/janelia-arduino/arduino-libraries]]
