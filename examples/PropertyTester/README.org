#+TITLE: PropertyTester
#+AUTHOR: Peter Polidoro
#+EMAIL: peterpolidoro@gmail.com

* Library Information
  - Author :: Peter Polidoro
  - License :: BSD

* Host Computer Interface
** Arduino Serial Monitor

   Open the Serial Monitor in the Arduino IDE.

   Set the baud to match the value in the Arduino sketch (115200).

   Set the line ending to 'Newline'.

   To get help information about the modular device, type a single
   question mark ? into the input property and press the 'Send' button or
   press the 'Enter' key.

   Request:

   #+BEGIN_SRC sh
     ?
   #+END_SRC

   Response:

   #+BEGIN_SRC js
     {
       "id": "?",
       "result": {
         "device_id": {
           "name": "property_tester",
           "form_factor": "3x2",
           "serial_number": 0
         },
         "api": {
           "firmware": [
             "PropertyTester"
           ],
           "verbosity": "NAMES",
           "functions": [
             "getDoubled",
             "getBool",
             "getLongArrayFixed",
             "getLongArrayVariable",
             "setLongArrayFixed",
             "setLongArrayVariable",
             "setLongArrayParameter",
             "getStringAll",
             "getStringSome",
             "getCount",
             "getCountArray",
             "getDirection",
             "getDirectionArray",
             "checkMode",
             "incrementMode",
             "setNewDoubleRange",
             "setNewOddSubset",
             "setNewOddDefault"
           ],
           "parameters": [
             "long_array_parameter",
             "length_parameter",
             "count",
             "count_array",
             "direction",
             "direction_array",
             "subset_index"
           ],
           "properties": [
             "double",
             "bool",
             "longArray",
             "doubleArray",
             "boolArray",
             "string",
             "odd",
             "mode",
             "modeArray",
             "oddArray"
           ]
         }
       }
     }
   #+END_SRC

   The form_factor and serial_number may be different on your board than the ones
   shown above.

   To get more verbose help about the modular device, including all API firmware,
   type two question marks ?? into the input property and press the 'Send' button
   or press the 'Enter' key.

   Request:

   #+BEGIN_SRC sh
     ??
   #+END_SRC

   Response:

   #+BEGIN_SRC js
     {
       "id": "??",
       "result": {
         "device_id": {
           "name": "property_tester",
           "form_factor": "3x2",
           "serial_number": 0
         },
         "api": {
           "firmware": [
             "ALL"
           ],
           "verbosity": "NAMES",
           "functions": [
             "getDeviceId",
             "getDeviceInfo",
             "getApi",
             "getPropertyDefaultValues",
             "setPropertiesToDefaults",
             "getPropertyValues",
             "getPinInfo",
             "setPinMode",
             "getPinValue",
             "setPinValue",
             "getDoubled",
             "getBool",
             "getLongArrayFixed",
             "getLongArrayVariable",
             "setLongArrayFixed",
             "setLongArrayVariable",
             "setLongArrayParameter",
             "getStringAll",
             "getStringSome",
             "getCount",
             "getCountArray",
             "getDirection",
             "getDirectionArray",
             "checkMode",
             "incrementMode",
             "setNewDoubleRange",
             "setNewOddSubset",
             "setNewOddDefault"
           ],
           "parameters": [
             "firmware",
             "verbosity",
             "pin_name",
             "pin_mode",
             "pin_value",
             "long_array_parameter",
             "length_parameter",
             "count",
             "count_array",
             "direction",
             "direction_array",
             "subset_index"
           ],
           "properties": [
             "serialNumber",
             "double",
             "bool",
             "longArray",
             "doubleArray",
             "boolArray",
             "string",
             "odd",
             "mode",
             "modeArray",
             "oddArray"
           ]
         }
       }
     }
   #+END_SRC

   "functions" is an array of user functions. To execute a function, simply type it
   into the input property and press the 'Send' button or press the 'Enter' key.

   Request:

   #+BEGIN_SRC sh
     setPropertiesToDefaults ["ALL"]
   #+END_SRC

   Response:

   #+BEGIN_SRC js
     {
       "id": "setPropertiesToDefaults",
       "result": null
     }
   #+END_SRC

   Request:

   #+BEGIN_SRC sh
     getPropertyValues ["PropertyTester"]
   #+END_SRC

   Response:

   #+BEGIN_SRC js
     {
       "id": "getPropertyValues",
       "result": {
         "double": 3.141590,
         "bool": false,
         "longArray": [
           5,
           4,
           3,
           2
         ],
         "doubleArray": [
           -1.100000,
           2.200000,
           3.300000
         ],
         "boolArray": [
           false,
           true
         ],
         "string": "abcdef",
         "odd": 5,
         "mode": "RISING",
         "modeArray": [
           "RISING",
           "FALLING"
         ],
         "oddArray": [
           1,
           5
         ]
       }
     }
   #+END_SRC

   Request:

   #+BEGIN_SRC sh
     double ?
   #+END_SRC

   Response:

   #+BEGIN_SRC js
     {
       "id": "double",
       "result": {
         "name": "double",
         "firmware": "PropertyTester",
         "type": "double",
         "min": 1.000000,
         "max": 5.000000,
         "value": 3.141590,
         "default_value": 3.141590,
         "functions": [
           "getValue",
           "setValue",
           "getDefaultValue",
           "setValueToDefault"
         ],
         "parameters": [
           "value"
         ]
       }
     }
   #+END_SRC

   Request:

   #+BEGIN_SRC sh
     longArray ?
   #+END_SRC

   Response:

   #+BEGIN_SRC js
     {
       "id": "longArray",
       "result": {
         "name": "longArray",
         "firmware": "PropertyTester",
         "type": "array",
         "array_element_type": "long",
         "array_element_min": -3,
         "array_element_max": 10,
         "array_length": 4,
         "array_length_default": 4,
         "array_length_min": 0,
         "array_length_max": 4,
         "value": [
           5,
           4,
           3,
           2
         ],
         "default_value": [
           5,
           4,
           3,
           2
         ],
         "functions": [
           "getValue",
           "setValue",
           "getDefaultValue",
           "setValueToDefault",
           "getElementValue",
           "setElementValue",
           "getDefaultElementValue",
           "setElementValueToDefault",
           "setAllElementValues",
           "getArrayLength",
           "setArrayLength"
         ],
         "parameters": [
           "value",
           "element_index",
           "element_value",
           "array_length"
         ]
       }
     }
   #+END_SRC

   Request:

   #+BEGIN_SRC sh
     longArray getValue
   #+END_SRC

   Response:

   #+BEGIN_SRC js
     {
       "id": "longArray",
       "result": [
         5,
         4,
         3,
         2
       ]
     }
   #+END_SRC

   Request:

   #+BEGIN_SRC sh
     longArray
   #+END_SRC

   Response:

   #+BEGIN_SRC js
     {
       "id": "longArray",
       "result": [
         5,
         4,
         3,
         2
       ]
     }
   #+END_SRC

   Request:

   #+BEGIN_SRC sh
     longArray setArrayLength 2
   #+END_SRC

   Response:

   #+BEGIN_SRC js
     {
       "id": "longArray",
       "result": 2
     }
   #+END_SRC

   #+BEGIN_SRC sh
     longArray
   #+END_SRC

   Response:

   #+BEGIN_SRC js
     {
       "id": "longArray",
       "result": [
         5,
         4
       ]
     }
   #+END_SRC

   #+BEGIN_SRC sh
     longArray setArrayLength 4
   #+END_SRC

   Response:

   #+BEGIN_SRC js
     {
       "id": "longArray",
       "result": 4
     }
   #+END_SRC

   Request:

   #+BEGIN_SRC sh
     doubleArray ?
   #+END_SRC

   Response:

   #+BEGIN_SRC js
     {
       "id": "doubleArray",
       "result": {
         "name": "doubleArray",
         "firmware": "PropertyTester",
         "type": "array",
         "array_element_type": "double",
         "array_element_min": -33.333000,
         "array_element_max": 100.000000,
         "array_length": 3,
         "array_length_default": 3,
         "array_length_min": 2,
         "array_length_max": 3,
         "value": [
           -1.100000,
           2.200000,
           3.300000
         ],
         "default_value": [
           -1.100000,
           2.200000,
           3.300000
         ],
         "functions": [
           "getValue",
           "setValue",
           "getDefaultValue",
           "setValueToDefault",
           "getElementValue",
           "setElementValue",
           "getDefaultElementValue",
           "setElementValueToDefault",
           "setAllElementValues",
           "getArrayLength",
           "setArrayLength"
         ],
         "parameters": [
           "value",
           "element_index",
           "element_value",
           "array_length"
         ]
       }
     }
   #+END_SRC

   Request:

   #+BEGIN_SRC sh
     doubleArray getElementValue 1
   #+END_SRC

   Response:

   #+BEGIN_SRC js
     {
       "id": "doubleArray",
       "result": 2.200000
     }
   #+END_SRC

   Request:

   #+BEGIN_SRC sh
     doubleArray getElementValue 10
   #+END_SRC

   Response:

   #+BEGIN_SRC js
     {
       "id": "doubleArray",
       "error": {
         "message": "Invalid params",
         "data": "Parameter value not valid. Value not in range: 0 <= element_index <= 2",
         "code": -32602
       }
     }
   #+END_SRC

   Request:

   #+BEGIN_SRC sh
     doubleArray setAllElementValues 8.7654
   #+END_SRC

   Response:

   #+BEGIN_SRC js
     {
       "id": "doubleArray",
       "result": [
         8.765400,
         8.765400,
         8.765400
       ]
     }
   #+END_SRC

   Request:

   #+BEGIN_SRC sh
     doubleArray setElementValue 1 5.678
   #+END_SRC

   Response:

   #+BEGIN_SRC js
     {
       "id": "doubleArray",
       "result": [
         8.765400,
         5.678000,
         8.765400
       ]
     }
   #+END_SRC

   Request:

   #+BEGIN_SRC sh
     doubleArray getDefaultElementValue 0
   #+END_SRC

   Response:

   #+BEGIN_SRC js
     {
       "id": "doubleArray",
       "result": -1.100000
     }
   #+END_SRC

   Request:

   #+BEGIN_SRC sh
     boolArray ?
   #+END_SRC

   Response:

   #+BEGIN_SRC js
     {
       "id": "boolArray",
       "result": {
         "name": "boolArray",
         "firmware": "PropertyTester",
         "type": "array",
         "array_element_type": "bool",
         "array_length": 2,
         "array_length_default": 2,
         "array_length_min": 0,
         "array_length_max": 2,
         "value": [
           false,
           true
         ],
         "default_value": [
           false,
           true
         ],
         "functions": [
           "getValue",
           "setValue",
           "getDefaultValue",
           "setValueToDefault",
           "getElementValue",
           "setElementValue",
           "getDefaultElementValue",
           "setElementValueToDefault",
           "setAllElementValues",
           "getArrayLength",
           "setArrayLength"
         ],
         "parameters": [
           "value",
           "element_index",
           "element_value",
           "array_length"
         ]
       }
     }
   #+END_SRC

   Request:

   #+BEGIN_SRC sh
     boolArray setValue [false,false]
   #+END_SRC

   Response:

   #+BEGIN_SRC js
     {
       "id": "boolArray",
       "result": [
         false,
         false
       ]
     }
   #+END_SRC

   Request:

   #+BEGIN_SRC sh
     string setValue asdfghjkl
   #+END_SRC

   Response:

   #+BEGIN_SRC js
     {
       "id": "string",
       "result": "asdfghjkl"
     }
   #+END_SRC

   Request:

   #+BEGIN_SRC sh
     string getElementValue 3
   #+END_SRC

   Response:

   #+BEGIN_SRC js
     {
       "id": "string",
       "result": "f"
     }
   #+END_SRC

   Request:

   #+BEGIN_SRC sh
     string setElementValue 3 X
   #+END_SRC

   Response:

   #+BEGIN_SRC js
     {
       "id": "string",
       "result": "asdXghjkl"
     }
   #+END_SRC

   Request:

   #+BEGIN_SRC sh
     odd setValue 2
   #+END_SRC

   Response:

   #+BEGIN_SRC js
     {
       "id": "odd",
       "error": {
         "message": "Invalid params",
         "data": "Parameter value not valid. Value not in subset: [1,3,5,7,9]",
         "code": -32602
       }
     }
   #+END_SRC

   Request:

   #+BEGIN_SRC sh
     odd setValue 7
   #+END_SRC

   Response:

   #+BEGIN_SRC js
     {
       "id": "odd",
       "result": 7
     }
   #+END_SRC

   Request:

   #+BEGIN_SRC sh
     mode setValue test
   #+END_SRC

   Response:

   #+BEGIN_SRC js
     {
       "id": "mode",
       "error": {
         "message": "Invalid params",
         "data": "Parameter value not valid. Value not in subset: [RISING,FALLING,CHANGE]",
         "code": -32602
       }
     }
   #+END_SRC

   Request:

   #+BEGIN_SRC sh
     mode setValue CHANGE
   #+END_SRC

   Response:

   #+BEGIN_SRC js
     {
       "id": "mode",
       "result": "CHANGE"
     }
   #+END_SRC

   Request:

   #+BEGIN_SRC sh
     oddArray setAllElementValues 2
   #+END_SRC

   Response:

   #+BEGIN_SRC js
     {
       "id": "oddArray",
       "error": {
         "message": "Invalid params",
         "data": "Parameter value not valid. Value not in subset: [1,3,5,7,9]",
         "code": -32602
       }
     }
   #+END_SRC

   Request:

   #+BEGIN_SRC sh
     oddArray setAllElementValues 9
   #+END_SRC

   Response:

   #+BEGIN_SRC js
     {
       "id": "oddArray",
       "result": [
         9,
         9
       ]
     }
   #+END_SRC

   Request:

   #+BEGIN_SRC sh
     getPropertyValues ["PropertyTester"]
   #+END_SRC

   Response:

   #+BEGIN_SRC js
     {
       "id": "getPropertyValues",
       "result": {
         "double": 3.141590,
         "bool": false,
         "longArray": [
           5,
           4,
           3,
           2
         ],
         "doubleArray": [
           8.765400,
           5.678000,
           8.765400
         ],
         "boolArray": [
           false,
           false
         ],
         "string": "asdXghjkl",
         "odd": 7,
         "mode": "CHANGE",
         "modeArray": [
           "RISING",
           "FALLING"
         ],
         "oddArray": [
           9,
           9
         ]
       }
     }
   #+END_SRC

   Use the getDeviceId function to get a unique set of values to identify
   the device.

   Request:

   #+BEGIN_SRC sh
     getDeviceId
   #+END_SRC

   Response:

   #+BEGIN_SRC js
     {
       "id": "getDeviceId",
       "result": {
         "name": "property_tester",
         "form_factor": "3x2",
         "serial_number": 0
       }
     }
   #+END_SRC

   The serial_number property can be changed to uniquely identify devices
   with the same name and form_factor.

   Use the getDeviceInfo function to get information about the hardware and
   firmware of the device.

   Request:

   #+BEGIN_SRC sh
     getDeviceInfo
   #+END_SRC

   Response:

   #+BEGIN_SRC js
     {
       "id": "getDeviceInfo",
       "result": {
         "processor": "MK20DX256",
         "hardware": [
           {
             "name": "Teensy",
             "version": "3.2"
           }
         ],
         "firmware": [
           {
             "name": "ModularServer",
             "version": "5.0.0"
           },
           {
             "name": "PropertyTester",
             "version": "2.0.0"
           }
         ]
       }
     }
   #+END_SRC

   Every function, parameter, property, and callback belongs to one firmware set.

   To get the API limited to one or more firmware sets, use the getApi
   function.

   Request:

   #+BEGIN_SRC sh
     getApi NAMES ["PropertyTester"]
   #+END_SRC

   Response:

   #+BEGIN_SRC js

     {
       "id": "getApi",
       "result": {
         "firmware": [
           "PropertyTester"
         ],
         "verbosity": "NAMES",
         "functions": [
           "getDoubled",
           "getBool",
           "getLongArrayFixed",
           "getLongArrayVariable",
           "setLongArrayFixed",
           "setLongArrayVariable",
           "setLongArrayParameter",
           "getStringAll",
           "getStringSome",
           "getCount",
           "getCountArray",
           "getDirection",
           "getDirectionArray",
           "checkMode",
           "incrementMode",
           "setNewDoubleRange",
           "setNewOddSubset",
           "setNewOddDefault"
         ],
         "parameters": [
           "long_array_parameter",
           "length_parameter",
           "count",
           "count_array",
           "direction",
           "direction_array",
           "subset_index"
         ],
         "properties": [
           "double",
           "bool",
           "longArray",
           "doubleArray",
           "boolArray",
           "string",
           "odd",
           "mode",
           "modeArray",
           "oddArray"
         ]
       }
     }
   #+END_SRC

** Python

   Example Python session:

   #+BEGIN_SRC python
     from modular_client import ModularClient
     dev = ModularClient() # Automatically finds device if one available
     dev.get_device_id()
     {'form_factor': '3x2', 'name': 'property_tester', 'serial_number': 0}
     dev.get_methods()
     ['long_array',
      'bool_array',
      'get_pin_info',
      'get_long_array_fixed',
      'get_direction',
      'set_new_odd_default',
      'increment_mode',
      'set_new_double_range',
      'mode',
      'set_pin_value',
      'get_long_array_variable',
      'get_doubled',
      'get_string_some',
      'get_bool',
      'set_long_array_variable',
      'mode_array',
      'set_new_odd_subset',
      'get_count',
      'set_long_array_parameter',
      'serial_number',
      'get_pin_value',
      'get_property_default_values',
      'get_api',
      'odd',
      'string',
      'double_array',
      'odd_array',
      'check_mode',
      'bool',
      'get_string_all',
      'get_device_info',
      'set_long_array_fixed',
      'double',
      'get_count_array',
      'set_properties_to_defaults',
      'get_direction_array',
      'get_device_id',
      'get_property_values',
      'set_pin_mode']
     dev.set_properties_to_defaults(['ALL'])
     dev.get_property_values(['PropertyTester'])
     {'bool': False,
      'boolArray': [False, True],
      'double': 3.14159,
      'doubleArray': [-1.1, 2.2, 3.3],
      'longArray': [5, 4, 3, 2],
      'mode': 'RISING',
      'modeArray': ['RISING', 'FALLING'],
      'odd': 5,
      'oddArray': [1, 5],
      'string': 'abcdef'}
     dev.long_array('getValue')
     [5, 4, 3, 2]
     dev.long_array()
     [5, 4, 3, 2]
     dev.double_array('getElementValue',1)
     2.2
     dev.double_array('getElementValue',10)
     IOError: (from server) message: Invalid params, data: Parameter value not valid. Value not in range: 0 <= element_index <= 2, code: -32602
     dev.double_array('setAllElementValues',8.7654)
     [8.7654, 8.7654, 8.7654]
     dev.double_array('setElementValue',1,5.678)
     [8.7654, 5.678, 8.7654]
     dev.double_array('getDefaultElementValue',0)
     -1.1
     dev.bool_array('setValue',[False,False])
     [False, False]
     dev.string('setValue','asdfghjkl')
     'asdfghjkl'
     dev.string('getElementValue',3)
     'f'
     dev.string('setElementValue',3,'X')
     'asdXghjkl'
     dev.odd('setValue',2)
     IOError: (from server) message: Invalid params, data: Parameter value not valid. Value not in subset: [1,3,5,7,9], code: -32602
     dev.odd('setValue',7)
     7
     dev.mode('setValue','test')
     IOError: (from server) message: Invalid params, data: Parameter value not valid. Value not in subset: [RISING,FALLING,CHANGE], code: -32602
     dev.mode('setValue','CHANGE')
     'CHANGE'
   #+END_SRC

   For more details on the Python interface:

   [[https://github.com/janelia-pypi/modular_client_python]]

** Matlab

   Example Matlab session:

   #+BEGIN_SRC matlab
     % Linux and Mac OS X
     ls /dev/tty*
     serial_port = '/dev/ttyACM0'     % example Linux serial port
     serial_port = '/dev/tty.usbmodem262471' % example Mac OS X serial port
                                             % Windows
     getAvailableComPorts()
     ans =
     'COM1'
     'COM4'
     serial_port = 'COM4'             % example Windows serial port
     dev = ModularClient(serial_port) % creates a device object
     dev.open()                       % opens a serial connection to the device
     dev.getDeviceId()
     ans =
     name: 'property_tester'
     form_factor: '3x2'
     serial_number: 0
     dev.getMethods()                 % get device functions
     Modular Device Methods
     ---------------------
     getDeviceId
     getDeviceInfo
     getApi
     getPropertyDefaultValues
     setPropertiesToDefaults
     getPropertyValues
     getPinInfo
     setPinMode
     getPinValue
     setPinValue
     getDoubled
     getBool
     getLongArrayFixed
     getLongArrayVariable
     setLongArrayFixed
     setLongArrayVariable
     setLongArrayParameter
     getStringAll
     getStringSome
     getCount
     getCountArray
     getDirection
     getDirectionArray
     checkMode
     incrementMode
     setNewDoubleRange
     setNewOddSubset
     setNewOddDefault
     serialNumber
     double
     bool
     longArray
     doubleArray
     boolArray
     string
     odd
     mode
     modeArray
     oddArray
     dev.setPropertiesToDefaults({'ALL'});
     dev.getPropertyValues({'PropertyTester'})
     ans =
     double: 3.1416
     bool: 0
     longArray: [5 4 3 2]
     doubleArray: [-1.1000 2.2000 3.3000]
     boolArray: {[0]  [1]}
     string: 'abcdef'
     odd: 5
     mode: 'RISING'
     modeArray: {'RISING'  'FALLING'}
     oddArray: [1 5]
     dev.longArray('getValue')
     ans =
     5     4     3     2
     dev.longArray()
     ans =
     5     4     3     2
     dev.doubleArray('getElementValue',1)
     ans =
     2.2000
     dev.doubleArray('getElementValue',10)
     (from server) message: Invalid params, data: Parameter value not valid. Value not in range: 0 <=
     element_index <= 2, code: -32602
     dev.doubleArray('setAllElementValues',8.7654)
     ans =
     8.7654    8.7654    8.7654
     dev.doubleArray('setElementValue',1,5.678)
     ans =
     8.7654    5.6780    8.7654
     dev.doubleArray('getDefaultElementValue',0)
     ans =
     -1.1000
     dev.boolArray('setValue',[false,false])
     ans =
     [0]    [0]
     dev.string('setValue','asdfghjkl')
     ans =
     asdfghjkl
     dev.string('getElementValue',3)
     ans =
     f
     dev.string('setElementValue',3,'X')
     ans =
     asdXghjkl
     dev.odd('setValue',2)
     (from server) message: Invalid params, data: Parameter value not valid. Value not in subset:
     [1,3,5,7,9], code: -32602
     dev.odd('setValue',7)
     ans =
     7
     dev.mode('setValue','test')
     (from server) message: Invalid params, data: Parameter value not valid. Value not in subset:
     [RISING,FALLING,CHANGE], code: -32602
     dev.mode('setValue','CHANGE')
     ans =
     CHANGE
     dev.close()
     clear dev
   #+END_SRC

   For more details on the Matlab interface:

   [[https://github.com/janelia-matlab/modular_client_matlab]]

* Installation

  [[https://github.com/janelia-arduino/arduino-libraries]]
