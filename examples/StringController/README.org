#+TITLE: StringController
#+AUTHOR: Peter Polidoro
#+EMAIL: peter@polidoro.io

* Library Information
  - Author :: Peter Polidoro
  - License :: BSD

* Host Computer Interface
** Arduino Serial Monitor

   Open the Serial Monitor in the Arduino IDE.

   Set the baud to match the value in the Arduino sketch (115200).

   Set the line ending to 'Newline'.

   To get help information about the modular device, type a single
   question mark ? into the input property and press the 'Send' button or
   press the 'Enter' key.

   Request:

   #+BEGIN_SRC sh
     ?
   #+END_SRC

   Response:

   #+BEGIN_SRC js
     {
       "id": "?",
       "result": {
         "device_id": {
           "name": "string_controller",
           "form_factor": "3x2",
           "serial_number": 0
         },
         "api": {
           "firmware": [
             "StringController"
           ],
           "verbosity": "NAMES",
           "functions": [
             "echo",
             "length",
             "startsWith",
             "repeat",
             "charsAt",
             "startingChars",
             "setStoredString",
             "getStoredString"
           ],
           "parameters": [
             "string",
             "string2",
             "count",
             "index_array",
             "double_echo"
           ],
           "properties": [
             "startingCharsCount",
             "storedString"
           ]
         }
       }
     }
   #+END_SRC

   The form_factor and serial_number may be different on your board than the ones
   shown above.

   To get more verbose help about the modular device, including all API firmware,
   type two question marks ?? into the input property and press the 'Send' button
   or press the 'Enter' key.

   Request:

   #+BEGIN_SRC sh
     ??
   #+END_SRC

   Response:

   #+BEGIN_SRC js
     {
       "id": "??",
       "result": {
         "device_id": {
           "name": "string_controller",
           "form_factor": "3x2",
           "serial_number": 0
         },
         "api": {
           "firmware": [
             "ALL"
           ],
           "verbosity": "NAMES",
           "functions": [
             "getDeviceId",
             "getDeviceInfo",
             "getApi",
             "getPropertyDefaultValues",
             "setPropertiesToDefaults",
             "getPropertyValues",
             "getPinInfo",
             "setPinMode",
             "getPinValue",
             "setPinValue",
             "echo",
             "length",
             "startsWith",
             "repeat",
             "charsAt",
             "startingChars",
             "setStoredString",
             "getStoredString"
           ],
           "parameters": [
             "firmware",
             "verbosity",
             "pin_name",
             "pin_mode",
             "pin_value",
             "string",
             "string2",
             "count",
             "index_array",
             "double_echo"
           ],
           "properties": [
             "serialNumber",
             "startingCharsCount",
             "storedString"
           ]
         }
       }
     }
   #+END_SRC

   "functions" is an array of user functions. To execute a function, simply
   type it into the input property and press the 'Send' button or press the
   'Enter' key.

   After uploading new firmware to the device for the first time, usually you want
   to set all properties to their default values, so the values will be known and
   valid.

   Request:

   #+BEGIN_SRC sh
     setPropertiesToDefaults ["ALL"]
   #+END_SRC

   Response:

   #+BEGIN_SRC js
     {
       "id": "setPropertiesToDefaults",
       "result": null
     }
   #+END_SRC

   Request:

   #+BEGIN_SRC sh
     getStoredString
   #+END_SRC

   Response:

   #+BEGIN_SRC js
     {
       "id": "getStoredString",
       "result": "I am a stored string."
     }
   #+END_SRC

   Request:

   #+BEGIN_SRC sh
     repeat
   #+END_SRC

   Response:

   #+BEGIN_SRC js
     {
       "id": "repeat",
       "error": {
         "message": "Invalid params",
         "data": "Incorrect number of parameters. 0 given. 2 needed.",
         "code": -32602
       }
     }
   #+END_SRC

   To get more information about a function, enter the function followed by
   a question mark ?

   Request:

   #+BEGIN_SRC sh
     repeat ?
   #+END_SRC

   Response:

   #+BEGIN_SRC js
     {
       "id": "repeat",
       "result": {
         "name": "repeat",
         "firmware": "StringController",
         "parameters": [
           "string",
           "count"
         ],
         "result_info": {
           "type": "array",
           "array_element_type": "string"
         }
       }
     }
   #+END_SRC

   The repeat function requires 2 parameters.

   To get more information about all of the parameters a function takes,
   enter the function followed by two questions marks ??:

   Request:

   #+BEGIN_SRC sh
     repeat ??
   #+END_SRC

   Response:

   #+BEGIN_SRC js
     {
       "id": "repeat",
       "result": {
         "name": "repeat",
         "firmware": "StringController",
         "parameters": [
           {
             "name": "string",
             "type": "string"
           },
           {
             "name": "count",
             "type": "long",
             "min": 1,
             "max": 100
           }
         ],
         "result_info": {
           "type": "array",
           "array_element_type": "string"
         }
       }
     }
   #+END_SRC

   To get more information about just one of the parameters a function takes,
   enter the function followed by the parameter followed by one question mark ?:

   Request:

   #+BEGIN_SRC sh
     repeat count ?
   #+END_SRC

   Response:

   #+BEGIN_SRC js
     {
       "id": "repeat",
       "result": {
         "name": "count",
         "firmware": "StringController",
         "type": "long",
         "min": 1,
         "max": 100
       }
     }
   #+END_SRC

   Request:

   #+BEGIN_SRC sh
     repeat "I am a string to repeat." 4
   #+END_SRC

   Response:

   #+BEGIN_SRC js
     {
       "id": "repeat",
       "result": [
         "I am a string to repeat.",
         "I am a string to repeat.",
         "I am a string to repeat.",
         "I am a string to repeat."
       ]
     }
   #+END_SRC

   Request:

   #+BEGIN_SRC sh
     charsAt "I am an input string!" [0,6,8]
   #+END_SRC

   Response:

   #+BEGIN_SRC js
     {
       "id": "charsAt",
       "result": [
         {
           "index": 0,
           "char": "I"
         },
         {
           "index": 6,
           "char": "n"
         },
         {
           "index": 8,
           "char": "i"
         }
       ]
     }
   #+END_SRC

   Request:

   #+BEGIN_SRC sh
     startingChars "Fantastic!"
   #+END_SRC

   Response:

   #+BEGIN_SRC js
     {
       "id": "startingChars",
       "result": "Fa"
     }
   #+END_SRC

   Request:

   #+BEGIN_SRC sh
     startingCharsCount setValue 5
   #+END_SRC

   Response:

   #+BEGIN_SRC js
     {
       "id": "startingCharsCount",
       "result": 5
     }
   #+END_SRC

   Request:

   #+BEGIN_SRC sh
     startingChars "Fantastic!"
   #+END_SRC

   Response:

   #+BEGIN_SRC js
     {
       "id": "startingChars",
       "result": "Fanta"
     }
   #+END_SRC

   Request:

   #+BEGIN_SRC sh
     storedString
   #+END_SRC

   Response:

   #+BEGIN_SRC js
     {
       "id": "storedString",
       "result": "I am a stored string."
     }
   #+END_SRC

   Request:

   #+BEGIN_SRC sh
     storedString setAllElementValues x
   #+END_SRC

   Response:

   #+BEGIN_SRC js
     {
       "id": "storedString",
       "result": "xxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
     }
   #+END_SRC

   Request:

   #+BEGIN_SRC sh
     storedString setValueToDefault
   #+END_SRC

   Response:

   #+BEGIN_SRC js
     {
       "id": "storedString",
       "result": "I am a stored string."
     }
   #+END_SRC

   Use the getDeviceId function to get a unique set of values to identify
   the device.

   Request:

   #+BEGIN_SRC sh
     getDeviceId
   #+END_SRC

   Response:

   #+BEGIN_SRC js
     {
       "id": "getDeviceId",
       "result": {
         "name": "string_controller",
         "form_factor": "3x2",
         "serial_number": 77
       }
     }
   #+END_SRC

   The serial_number property can be changed to uniquely identify devices
   with the same name and form_factor.

   Use the getDeviceInfo function to get information about the hardware and
   firmware of the device.

   Request:

   #+BEGIN_SRC sh
     getDeviceInfo
   #+END_SRC

   Response:

   #+BEGIN_SRC js
     {
       "id": "getDeviceInfo",
       "result": {
         "processor": "MK20DX256",
         "hardware": [
           {
             "name": "Teensy",
             "version": "3.2"
           }
         ],
         "firmware": [
           {
             "name": "ModularServer",
             "version": "5.0.0"
           },
           {
             "name": "StringController",
             "version": "2.0.0"
           }
         ]
       }
     }
   #+END_SRC

   Every function, parameter, property, and callback belongs to one
   firmware set.

   To get the API limited to one or more firmware sets, use the getApi
   function.

   Request:

   #+BEGIN_SRC sh
     getApi NAMES ["StringController"]
   #+END_SRC

   Response:

   #+BEGIN_SRC js
     {
       "id": "getApi",
       "result": {
         "firmware": [
           "StringController"
         ],
         "verbosity": "NAMES",
         "functions": [
           "echo",
           "length",
           "startsWith",
           "repeat",
           "charsAt",
           "startingChars",
           "setStoredString",
           "getStoredString"
         ],
         "parameters": [
           "string",
           "string2",
           "count",
           "index_array",
           "double_echo"
         ],
         "properties": [
           "startingCharsCount",
           "storedString"
         ]
       }
     }
   #+END_SRC

** Python

   Example Python session:

   #+BEGIN_SRC python
     from modular_client import ModularClient
     dev = ModularClient() # Automatically finds device if one available
     dev.get_device_id()
     {'form_factor': '3x2', 'name': 'string_controller', 'serial_number': 77}
     dev.get_methods()
     ['stored_string',
      'get_device_info',
      'starts_with',
      'chars_at',
      'starting_chars',
      'get_api',
      'get_device_id',
      'get_property_values',
      'echo',
      'set_pin_value',
      'get_pin_value',
      'set_properties_to_defaults',
      'get_property_default_values',
      'get_stored_string',
      'starting_chars_count',
      'length',
      'serial_number',
      'set_stored_string',
      'repeat',
      'set_pin_mode',
      'get_pin_info']
     dev.set_properties_to_defaults(['ALL'])
     dev.repeat()
     IOError: (from server) message: Invalid params, data: Incorrect number of parameters. 0 given. 2 needed., code: -32602
     dev.repeat('?')
     {'firmware': 'StringController',
      'name': 'repeat',
      'parameters': ['string', 'count'],
      'result_info': {'array_element_type': 'string', 'type': 'array'}}
     dev.repeat('??')
     {'firmware': 'StringController',
      'name': 'repeat',
      'parameters': [{'name': 'string', 'type': 'string'},
                     {'max': 100, 'min': 1, 'name': 'count', 'type': 'long'}],
      'result_info': {'array_element_type': 'string', 'type': 'array'}}
     dev.repeat('count','?')
     {'firmware': 'StringController',
      'max': 100,
      'min': 1,
      'name': 'count',
      'type': 'long'}
     dev.repeat('"I am a string to repeat."',-1)
     IOError: (from server) message: Invalid params, data: Parameter value out of range: 1 <= count <= 100, code: -32602
     dev.repeat('I am a string to repeat.',4)
     ['I am a string to repeat.',
      'I am a string to repeat.',
      'I am a string to repeat.',
      'I am a string to repeat.']
     dev.chars_at('I am an input string!',[0,6,8])
     [{'char': 'I', 'index': 0},
      {'char': 'n', 'index': 6},
      {'char': 'i', 'index': 8}]
     dev.starting_chars_count('getValue')
     2
     dev.starting_chars_count('setValue',3)
     3
     dev.call_get_result('starting_chars_count','setValue',7)
     7
     dev.send_json_request('["startingCharsCount","setValue",3]')
     3
     dev.starting_chars('Fantastic!')
     'Fan'
     dev.call_get_result('starting_chars','Fantastic!')
     'Fan'
     dev.send_json_request('["startingChars","Fantastic!"]')
     'Fan'
     dev.get_api('NAMES',["StringController"])
     {'firmware': ['StringController'],
      'functions': ['echo',
                    'length',
                    'startsWith',
                    'repeat',
                    'charsAt',
                    'startingChars',
                    'setStoredString',
                    'getStoredString'],
      'parameters': ['string', 'string2', 'count', 'index_array', 'double_echo'],
      'properties': ['startingCharsCount', 'storedString'],
      'verbosity': 'NAMES'}
   #+END_SRC

   For more details on the Python interface:

   [[https://github.com/janelia-pypi/modular_client_python]]

** Matlab

   Example Matlab session:

   #+BEGIN_SRC matlab
     % Linux and Mac OS X
     ls /dev/tty*
     serial_port = '/dev/ttyACM0'     % example Linux serial port
     serial_port = '/dev/tty.usbmodem262471' % example Mac OS X serial port
                                             % Windows
     getAvailableComPorts()
     ans =
     'COM1'
     'COM4'
     serial_port = 'COM4'             % example Windows serial port
     dev = ModularClient(serial_port) % creates a device object
     dev.open()                       % opens a serial connection to the device
     dev.getDeviceId()
     ans =
     name: 'string_controller'
     form_factor: '3x2'
     serial_number: 77
     dev.getMethods()
     Modular Device Methods
     ---------------------
     getDeviceId
     getDeviceInfo
     getApi
     getPropertyDefaultValues
     setPropertiesToDefaults
     getPropertyValues
     getPinInfo
     setPinMode
     getPinValue
     setPinValue
     echo
     length
     startsWith
     repeat
     charsAt
     startingChars
     setStoredString
     getStoredString
     serialNumber
     startingCharsCount
     storedString
     dev.setPropertiesToDefaults({'ALL'});
     dev.repeat()
     (from server) message: Invalid params, data: Incorrect number of parameters. 0 given. 2 needed., code: -32602
     dev.repeat('?')
     ans =
     name: 'repeat'
     firmware: 'StringController'
     parameters: {'string'  'count'}
     result_info: [1x1 struct]
     dev.repeat('count','?')
     ans =
     name: 'count'
     firmware: 'StringController'
     type: 'long'
     min: 1
     max: 100
     dev.repeat('I am a string to repeat.',-1)
     device responded with error, Parameter value out of range: 1 <= count <= 100
     repeated = dev.repeat('I am a string to repeat.',4);
     json = dev.convertToJson(repeated)
     ["I am a string to repeat.","I am a string to repeat.","I am a string to repeat.","I am a string to repeat."]
     chars_at = dev.charsAt('I am an input string!',[0,6,8]);
     json = dev.convertToJson(chars_at)
     json =
     [{"index": 0,"char": "I"},{"index": 6,"char": "n"},{"index": 8,"char": "i"}]
     dev.startingCharsCount('getValue')
     ans =
     2
     dev.startingCharsCount('setValue',5)
     ans =
     5
     dev.startingChars('Fantastic!')
     ans =
     Fanta
     result = dev.callGetResult('startingChars','Fantastic!')
     result =
     Fanta
     result = dev.sendJsonRequest('["startingChars","Fantastic!"]')
     result =
     Fanta
     dev.close()
     clear dev
   #+END_SRC

   For more details on the Matlab interface:

   [[https://github.com/janelia-matlab/modular_client_matlab]]

* Installation

  [[https://github.com/janelia-arduino/arduino-libraries]]
