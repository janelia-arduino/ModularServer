#+TITLE: MinimalDevice
#+AUTHOR: Peter Polidoro
#+EMAIL: peterpolidoro@gmail.com

* Library Information
  - Author :: Peter Polidoro
  - License :: BSD

* Host Computer Interface
** Arduino Serial Monitor

   Open the Serial Monitor in the Arduino IDE.

   Set the baud to match the value in the Arduino sketch (115200).

   Set the line ending to 'Newline'.

   To get help information about the modular device, type a single
   question mark ? into the input property and press the 'Send' button or
   press the 'Enter' key.

   Request:

   #+BEGIN_SRC sh
?
   #+END_SRC

   Response:

   #+BEGIN_SRC js
{
  "id": "?",
  "result": {
    "device_id": {
      "name": "minimal_device",
      "form_factor": "3x2",
      "serial_number": 0
    },
    "api": {
      "firmware": [
        "MinimalDevice"
      ],
      "verbosity": "NAMES"
    }
  }
}
   #+END_SRC

   The form_factor and serial_number may be different on your board than the ones
   shown above.

   The minimal device adds no functions, parameters, properties, or callbacks to
   the ones provided by the parent class ModularServer.

   To get more verbose help about the modular device, including all API firmware,
   type two question marks ?? into the input property and press the 'Send' button
   or press the 'Enter' key.

   Request:

   #+BEGIN_SRC sh
??
   #+END_SRC

   Response:

   #+BEGIN_SRC js
{
  "id": "??",
  "result": {
    "device_id": {
      "name": "minimal_device",
      "form_factor": "3x2",
      "serial_number": 0
    },
    "api": {
      "firmware": [
        "ALL"
      ],
      "verbosity": "NAMES",
      "functions": [
        "getDeviceId",
        "getDeviceInfo",
        "getApi",
        "getPropertyDefaultValues",
        "setPropertiesToDefaults",
        "getPropertyValues",
        "getPinInfo",
        "setPinMode",
        "getPinValue",
        "setPinValue"
      ],
      "parameters": [
        "firmware",
        "verbosity",
        "pin_name",
        "pin_mode",
        "pin_value"
      ],
      "properties": [
        "serialNumber"
      ]
    }
  }
}
   #+END_SRC

   "functions" is an array of user functions. To execute a function, simply
   type it into the input property and press the 'Send' button or press the
   'Enter' key.

   After uploading new firmware to the device for the first time, usually you want
   to set all properties to their default values, so the values will be known and
   valid.

   Request:

   #+BEGIN_SRC sh
setPropertiesToDefaults ["ALL"]
   #+END_SRC

   Response:

   #+BEGIN_SRC js
{
  "id": "setPropertiesToDefaults",
  "result": null
}
   #+END_SRC

   Request:

   #+BEGIN_SRC sh
getApi
   #+END_SRC

   Response:

   #+BEGIN_SRC js
{
  "id": "getApi",
  "error": {
    "message": "Invalid params",
    "data": "Incorrect number of parameters. 0 given. 2 needed.",
    "code": -32602
  }
}
   #+END_SRC

   When a function executes successfully, the response will contain a
   "result" property. In some cases the result may be null, but the function
   execution was still successful. When there is an error, there will not
   exist a "result" property, but there will exist an "error" property.

   To get more information about a function, enter the function followed by
   a question mark.

   Request:

   #+BEGIN_SRC sh
getApi ?
   #+END_SRC

   Response:

   #+BEGIN_SRC js
{
  "id": "getApi",
  "result": {
    "name": "getApi",
    "firmware": "ModularServer",
    "parameters": [
      "verbosity",
      "firmware"
    ],
    "result_info": {
      "type": "object"
    }
  }
}
   #+END_SRC

   Or you can enter a question mark followed by the function.

   Request:

   #+BEGIN_SRC sh
? getApi
   #+END_SRC

   Response:

   #+BEGIN_SRC js
{
  "id": "?",
  "result": {
    "name": "getApi",
    "firmware": "ModularServer",
    "parameters": [
      "verbosity",
      "firmware"
    ],
    "result_info": {
      "type": "object"
    }
  }
}

   #+END_SRC

   To get more verbose information about all of the parameters a function
   takes, enter the function followed by two questions marks.

   Request:

   #+BEGIN_SRC sh
getApi ??
   #+END_SRC

   Response:

   #+BEGIN_SRC js
{
  "id": "getApi",
  "result": {
    "name": "getApi",
    "firmware": "ModularServer",
    "parameters": [
      {
        "name": "verbosity",
        "type": "string",
        "subset": [
          "NAMES",
          "GENERAL",
          "DETAILED"
        ]
      },
      {
        "name": "firmware",
        "type": "array",
        "array_element_type": "string",
        "array_element_subset": [
          "ALL",
          "ModularServer",
          "MinimalDevice"
        ],
        "array_length_min": 1,
        "array_length_max": 2
      }
    ],
    "result_info": {
      "type": "object"
    }
  }
}
   #+END_SRC

   Request:

   #+BEGIN_SRC sh
getApi GENERAL ["ALL"]
   #+END_SRC

   Response:

   #+BEGIN_SRC js
{
  "id": "getApi",
  "result": {
    "firmware": [
      "ALL"
    ],
    "verbosity": "GENERAL",
    "functions": [
      {
        "name": "getDeviceId",
        "firmware": "ModularServer",
        "result_info": {
          "type": "object"
        }
      },
      {
        "name": "getDeviceInfo",
        "firmware": "ModularServer",
        "result_info": {
          "type": "object"
        }
      },
      {
        "name": "getApi",
        "firmware": "ModularServer",
        "parameters": [
          "verbosity",
          "firmware"
        ],
        "result_info": {
          "type": "object"
        }
      },
      {
        "name": "getPropertyDefaultValues",
        "firmware": "ModularServer",
        "parameters": [
          "firmware"
        ],
        "result_info": {
          "type": "object"
        }
      },
      {
        "name": "setPropertiesToDefaults",
        "firmware": "ModularServer",
        "parameters": [
          "firmware"
        ]
      },
      {
        "name": "getPropertyValues",
        "firmware": "ModularServer",
        "parameters": [
          "firmware"
        ],
        "result_info": {
          "type": "object"
        }
      },
      {
        "name": "getPinInfo",
        "firmware": "ModularServer",
        "parameters": [
          "pin_name"
        ],
        "result_info": {
          "type": "array",
          "array_element_type": "object"
        }
      },
      {
        "name": "setPinMode",
        "firmware": "ModularServer",
        "parameters": [
          "pin_name",
          "pin_mode"
        ]
      },
      {
        "name": "getPinValue",
        "firmware": "ModularServer",
        "parameters": [
          "pin_name"
        ],
        "result_info": {
          "type": "long"
        }
      },
      {
        "name": "setPinValue",
        "firmware": "ModularServer",
        "parameters": [
          "pin_name",
          "pin_value"
        ],
        "result_info": {
          "type": "long"
        }
      }
    ],
    "parameters": [
      {
        "name": "firmware",
        "firmware": "ModularServer",
        "type": "array",
        "array_element_type": "string"
      },
      {
        "name": "verbosity",
        "firmware": "ModularServer",
        "type": "string"
      },
      {
        "name": "pin_name",
        "firmware": "ModularServer",
        "type": "string"
      },
      {
        "name": "pin_mode",
        "firmware": "ModularServer",
        "type": "string"
      },
      {
        "name": "pin_value",
        "firmware": "ModularServer",
        "type": "long"
      }
    ],
    "properties": [
      {
        "name": "serialNumber",
        "firmware": "ModularServer",
        "type": "long",
        "functions": [
          {
            "name": "getValue",
            "result_info": {
              "type": "long"
            }
          },
          {
            "name": "setValue",
            "parameters": [
              "value"
            ],
            "result_info": {
              "type": "long"
            }
          },
          {
            "name": "getDefaultValue",
            "result_info": {
              "type": "long"
            }
          },
          {
            "name": "setValueToDefault",
            "result_info": {
              "type": "long"
            }
          }
        ],
        "parameters": [
          {
            "name": "value",
            "type": "long"
          }
        ]
      }
    ]
  }
}
   #+END_SRC

   Properties are special functions that get and set field values that are
   stored on the device, even after the device is powered off.

   Properties have their own set of functions with their own set of
   property function parameters.

   Request:

   #+BEGIN_SRC sh
serialNumber ?
   #+END_SRC

   Response:

   #+BEGIN_SRC js
{
  "id": "serialNumber",
  "result": {
    "name": "serialNumber",
    "firmware": "ModularServer",
    "type": "long",
    "min": 0,
    "max": 65535,
    "value": 0,
    "default_value": 0,
    "functions": [
      "getValue",
      "setValue",
      "getDefaultValue",
      "setValueToDefault"
    ],
    "parameters": [
      "value"
    ]
  }
}
   #+END_SRC

   Request:

   #+BEGIN_SRC sh
serialNumber setValue ?
   #+END_SRC

   Response:

   #+BEGIN_SRC js
{
  "id": "serialNumber",
  "result": {
    "name": "setValue",
    "firmware": "ModularServer",
    "parameters": [
      "value"
    ],
    "result_info": {
      "type": "long"
    }
  }
}
   #+END_SRC

   Request:

   #+BEGIN_SRC sh
serialNumber setValue value ?
   #+END_SRC

   Response:

   #+BEGIN_SRC js
{
  "id": "serialNumber",
  "result": {
    "name": "value",
    "firmware": "ModularServer",
    "type": "long",
    "min": 0,
    "max": 65535
  }
}
   #+END_SRC

   Request:

   #+BEGIN_SRC sh
serialNumber setValue -1
   #+END_SRC

   Response:

   #+BEGIN_SRC js
{
  "id": "serialNumber",
  "error": {
    "message": "Invalid params",
    "data": "Parameter value not valid. Value not in range: 0 <= value <= 65535",
    "code": -32602
  }
}
   #+END_SRC

   Request:

   #+BEGIN_SRC sh
serialNumber setValue 32
   #+END_SRC

   Response:

   #+BEGIN_SRC js
{
  "id": "serialNumber",
  "result": 32
}
   #+END_SRC

   The serial number setting persists even after the device is powered
   off. The serial number is used to differentiate several identical
   devices connected to a single host machine at one time.

   Request:

   #+BEGIN_SRC sh
getPropertyValues ["ALL"]
   #+END_SRC

   Response:

   #+BEGIN_SRC js
{
  "id": "getPropertyValues",
  "result": {
    "serialNumber": 32
  }
}
   #+END_SRC

   Use the setPropertiesToDefault function to set all properties to their default
   values.

   Or to reset the just one property to the default value, use the
   setValueToDefault property function.

   Request:

   #+BEGIN_SRC sh
serialNumber setValueToDefault
   #+END_SRC

   Response:

   #+BEGIN_SRC js
{
  "id": "serialNumber",
  "result": 0
}
   #+END_SRC

   Use the getDeviceId function to get a unique set of values to identify
   the device.

   Request:

   #+BEGIN_SRC sh
getDeviceId
   #+END_SRC

   Response:

   #+BEGIN_SRC js
{
  "id": "getDeviceId",
  "result": {
    "name": "minimal_device",
    "form_factor": "3x2",
    "serial_number": 0
  }
}
   #+END_SRC

   The serial_number property can be changed to uniquely identify devices
   with the same name and form_factor.

   Use the getDeviceInfo function to get information about the hardware and
   firmware of the device.

   Request:

   #+BEGIN_SRC sh
getDeviceInfo
   #+END_SRC

   Response:

   #+BEGIN_SRC js
{
  "id": "getDeviceInfo",
  "result": {
    "processor": "MK20DX256",
    "hardware": [
      {
        "name": "Teensy",
        "version": "3.2"
      }
    ],
    "firmware": [
      {
        "name": "ModularServer",
        "version": "5.0.0"
      },
      {
        "name": "MinimalDevice",
        "version": "2.0.0"
      }
    ]
  }
}
   #+END_SRC

   Every function, parameter, property, and callback belongs to one firmware set.

   To get the API limited to one or more firmware sets, use the getApi
   function.

   Request:

   #+BEGIN_SRC sh
getApi NAMES ["ALL"]
   #+END_SRC

   Response:

   #+BEGIN_SRC js
{
  "id": "getApi",
  "result": {
    "firmware": [
      "ALL"
    ],
    "verbosity": "NAMES",
    "functions": [
      "getDeviceId",
      "getDeviceInfo",
      "getApi",
      "getPropertyDefaultValues",
      "setPropertiesToDefaults",
      "getPropertyValues",
      "getPinInfo",
      "setPinMode",
      "getPinValue",
      "setPinValue"
    ],
    "parameters": [
      "firmware",
      "verbosity",
      "pin_name",
      "pin_mode",
      "pin_value"
    ],
    "properties": [
      "serialNumber"
    ]
  }
}
   #+END_SRC

   Request:

   #+BEGIN_SRC sh
getApi NAMES ["MinimalDevice"]
   #+END_SRC

   Response:

   #+BEGIN_SRC js
{
  "id": "getApi",
  "result": {
    "firmware": [
      "MinimalDevice"
    ],
    "verbosity": "NAMES"
  }
}
   #+END_SRC

** Python

   Example Python session:

   #+BEGIN_SRC python
from modular_client import ModularClient
dev = ModularClient() # Automatically finds device if one available
dev.get_device_id()
{'form_factor': '3x2', 'name': 'minimal_device', 'serial_number': 0}
dev.get_methods()
['get_property_default_values',
 'get_device_info',
 'set_pin_mode',
 'serial_number',
 'get_property_values',
 'get_pin_value',
 'get_pin_info',
 'set_pin_value',
 'get_device_id',
 'get_api',
 'set_properties_to_defaults']
dev.set_properties_to_defaults(['ALL'])
dev.get_api()
IOError: (from server) message: Invalid params, data: Incorrect number of parameters. 0 given. 2 needed., code: -32602
dev.get_api('?')
{'firmware': 'ModularServer',
 'name': 'getApi',
 'parameters': ['verbosity', 'firmware'],
 'result_info': {'type': 'object'}}
dev.get_api('NAMES',['ALL'])
{'firmware': ['ALL'],
 'functions': ['getDeviceId',
  'getDeviceInfo',
  'getApi',
  'getPropertyDefaultValues',
  'setPropertiesToDefaults',
  'getPropertyValues',
  'getPinInfo',
  'setPinMode',
  'getPinValue',
  'setPinValue'],
 'parameters': ['firmware', 'verbosity', 'pin_name', 'pin_mode', 'pin_value'],
 'properties': ['serialNumber'],
 'verbosity': 'NAMES'}
dev.serial_number('setValue',-1)
IOError: (from server) message: Invalid params, data: Parameter value not valid. Value not in range: 0 <= value <= 65535, code: -32602
dev.serial_number('setValue',32)
32
dev.get_property_values(['ALL'])
{'serialNumber': 32}
result = dev.call_get_result('?')
result['device_id']['serial_number']
32
dev.convert_to_json(result['device_id'])
'{"serial_number":32,"name":"minimal_device","form_factor":"3x2"}'
dev.send_json_request('["set_properties_to_defaults",["ALL"]]')
dev.serial_number('getValue')
0
   #+END_SRC

   For more details on the Python interface:

   [[https://github.com/janelia-pypi/modular_client_python]]

** Matlab

   Example Matlab session:

   #+BEGIN_SRC matlab
% Linux and Mac OS X
ls /dev/tty*
serial_port = '/dev/ttyACM0'     % example Linux serial port
serial_port = '/dev/tty.usbmodem262471' % example Mac OS X serial port
% Windows
getAvailableComPorts()
ans =
  'COM1'
  'COM4'
serial_port = 'COM4'             % example Windows serial port
dev = ModularClient(serial_port) % creates a device object
dev.open()                       % opens a serial connection to the device
dev.getDeviceId()
ans =
  name: 'minimal_device'
  form_factor: '3x2'
  serial_number: 0
dev.getMethods()                 % get device methods
  Modular Device Methods
  ---------------------
  getDeviceId
  getDeviceInfo
  getApi
  getPropertyDefaultValues
  setPropertiesToDefaults
  getPropertyValues
  getPinInfo
  setPinMode
  getPinValue
  setPinValue
  serialNumber
dev.getApi()
(from server) message: Invalid params, data: Incorrect number of parameters. 0 given. 1 needed.,
code: -32602
dev.getApi('?')
ans =
  name: 'getApi'
  firmware: 'ModularServer'
  parameters: {'verbosity'  'firmware'}
  result_info: [1x1 struct]
dev.getApi('firmware','?')
ans =
  name: 'firmware'
  firmware: 'ModularServer'
  type: 'array'
  array_element_type: 'string'
  array_element_subset: {'ALL'  'ModularServer'  'MinimalDevice'}
  array_length_min: 1
  array_length_max: 2
dev.getApi('NAMES',{'ALL'})
ans =
  firmware: {'ALL'}
  verbosity: 'NAMES'
  functions: {1x8 cell}
  parameters: {'firmware'  'verbosity'}
  properties: {'serialNumber'}
dev.serialNumber('setValue',-1)
(from server) message: Invalid params, data: Parameter value not valid. Value not in range: 0 <=
value <= 65535, code: -32602
dev.serialNumber('setValue',32)
ans =
  32
dev.getPropertyValues({'ALL'})
ans =
  serialNumber: 32
result = dev.callGetResult('?');
result.device_id.serial_number
ans =
  32
json = dev.convertToJson(result.device_id)
{"name": "minimal_device","form_factor": "3x2","serial_number": 32}
dev.sendJsonRequest('["setPropertiesToDefaults",["ALL"]]')
dev.serialNumber('getValue')
ans =
  0
dev.close()
clear dev
   #+END_SRC

   For more details on the Matlab interface:

   [[https://github.com/janelia-matlab/modular_client_matlab]]

* Installation

  [[https://github.com/janelia-arduino/arduino-libraries]]
